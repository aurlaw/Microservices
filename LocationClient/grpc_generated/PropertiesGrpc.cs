// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: properties.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace LocationProxy {
  /// <summary>
  /// Interface exported by the server.
  /// </summary>
  public static partial class Property
  {
    static readonly string __ServiceName = "LocationProxy.Property";

    static readonly grpc::Marshaller<global::LocationProxy.Point> __Marshaller_LocationProxy_Point = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LocationProxy.Point.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LocationProxy.Detail> __Marshaller_LocationProxy_Detail = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LocationProxy.Detail.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::LocationProxy.DetailRequest> __Marshaller_LocationProxy_DetailRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::LocationProxy.DetailRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::LocationProxy.Point, global::LocationProxy.Detail> __Method_GetDetail = new grpc::Method<global::LocationProxy.Point, global::LocationProxy.Detail>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDetail",
        __Marshaller_LocationProxy_Point,
        __Marshaller_LocationProxy_Detail);

    static readonly grpc::Method<global::LocationProxy.DetailRequest, global::LocationProxy.Detail> __Method_GetDetailByName = new grpc::Method<global::LocationProxy.DetailRequest, global::LocationProxy.Detail>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDetailByName",
        __Marshaller_LocationProxy_DetailRequest,
        __Marshaller_LocationProxy_Detail);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::LocationProxy.PropertiesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Property</summary>
    public abstract partial class PropertyBase
    {
      /// <summary>
      /// Obtains the detail at a given position.
      ///
      /// A detail with an empty name is returned if there's no detail at the given
      /// position.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LocationProxy.Detail> GetDetail(global::LocationProxy.Point request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Obtains the detail by name
      ///
      /// A detail with an empty name is returned if there's no detail found.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::LocationProxy.Detail> GetDetailByName(global::LocationProxy.DetailRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Property</summary>
    public partial class PropertyClient : grpc::ClientBase<PropertyClient>
    {
      /// <summary>Creates a new client for Property</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PropertyClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Property that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PropertyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PropertyClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PropertyClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Obtains the detail at a given position.
      ///
      /// A detail with an empty name is returned if there's no detail at the given
      /// position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LocationProxy.Detail GetDetail(global::LocationProxy.Point request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetail(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains the detail at a given position.
      ///
      /// A detail with an empty name is returned if there's no detail at the given
      /// position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LocationProxy.Detail GetDetail(global::LocationProxy.Point request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDetail, null, options, request);
      }
      /// <summary>
      /// Obtains the detail at a given position.
      ///
      /// A detail with an empty name is returned if there's no detail at the given
      /// position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LocationProxy.Detail> GetDetailAsync(global::LocationProxy.Point request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetailAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains the detail at a given position.
      ///
      /// A detail with an empty name is returned if there's no detail at the given
      /// position.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LocationProxy.Detail> GetDetailAsync(global::LocationProxy.Point request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDetail, null, options, request);
      }
      /// <summary>
      /// Obtains the detail by name
      ///
      /// A detail with an empty name is returned if there's no detail found.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LocationProxy.Detail GetDetailByName(global::LocationProxy.DetailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetailByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains the detail by name
      ///
      /// A detail with an empty name is returned if there's no detail found.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::LocationProxy.Detail GetDetailByName(global::LocationProxy.DetailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDetailByName, null, options, request);
      }
      /// <summary>
      /// Obtains the detail by name
      ///
      /// A detail with an empty name is returned if there's no detail found.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LocationProxy.Detail> GetDetailByNameAsync(global::LocationProxy.DetailRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDetailByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Obtains the detail by name
      ///
      /// A detail with an empty name is returned if there's no detail found.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::LocationProxy.Detail> GetDetailByNameAsync(global::LocationProxy.DetailRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDetailByName, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PropertyClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PropertyClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(PropertyBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetDetail, serviceImpl.GetDetail)
          .AddMethod(__Method_GetDetailByName, serviceImpl.GetDetailByName).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, PropertyBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetDetail, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LocationProxy.Point, global::LocationProxy.Detail>(serviceImpl.GetDetail));
      serviceBinder.AddMethod(__Method_GetDetailByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::LocationProxy.DetailRequest, global::LocationProxy.Detail>(serviceImpl.GetDetailByName));
    }

  }
}
#endregion
